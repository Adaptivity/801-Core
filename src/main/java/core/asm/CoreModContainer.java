package core.asm;

import com.google.common.eventbus.EventBus;
import core.api.metadata.IMetadata;
import core.common.resources.CoreMetadata;
import core.common.resources.CoreResources;
import core.helpers.ModHelper;
import core.helpers.StringHelper;
import cpw.mods.fml.common.DummyModContainer;
import cpw.mods.fml.common.LoadController;
import cpw.mods.fml.common.ModContainer;
import cpw.mods.fml.common.ModMetadata;

import java.util.Arrays;
import java.util.List;

/**
 * Created by Master801 on 12/28/2014 at 12:52 PM.
 * @author Master801
 */
public class CoreModContainer extends DummyModContainer {

    public static final String CORE_VERSION = "@CORE_VERSION@";//The version for 801-Core.

    public CoreModContainer() {
        super(ModHelper.handshakeMetadata(new ModMetadata(), new IMetadata() {

                @Override
                public List<String> getAuthorList() {
                    return Arrays.asList("Master801");
                }

                @Override
                public boolean isAutoGenerated() {
                    return false;
                }

                @Override
                public List<ModContainer> getChildMods() {
                    return null;
                }

                @Override
                public List<String> getCredits() {
                    return null;
                }

                @Override
                public String getDescription() {
                    return StringHelper.advancedMessage("Core Mod for %s.", CoreResources.CORE_LIBRARY_VERSION);
                }

                @Override
                public String getLogo() {
                    return null;
                }

                @Override
                public String getModID() {
                    return "801-Core";
                }

                @Override
                public String getModName() {
                    return "801-CoreMod";
                }

                @Override
                public String getParentMod() {
                    return null;
                }

                @Override
                public String[] getScreenShots() {
                    return new String[0];
                }

                @Override
                public String getUpdateURL() {
                    return "";
                }

                @Override
                public String getURL() {
                    return CoreMetadata.INSTANCE.getURL();
                }

                @Override
                public String getModVersion() {
                    return CoreModContainer.CORE_VERSION;
            }

        }));
    }

    @Override
    public boolean registerBus(EventBus bus, LoadController controller) {
        return true;
    }

}
